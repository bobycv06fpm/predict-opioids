Import("*")

# model matrix and correlations
for feature in features:
    env.R(["#scratch/models/matrix.{}.RData".format(feature),
           "#scratch/models/matrix.{}.train.txt".format(feature),
           "#scratch/models/matrix.{}.validate.txt".format(feature),
           "#scratch/models/matrix.{}.test.txt".format(feature)],
          ["matrix.R", "#scratch/population.csv", "#scratch/outcomes/all.csv"] + features[feature],
          log_path="#output/models/matrix.{}.R.log".format(feature))
    env.R("#output/models/corr.pairwise.{}.csv".format(feature),
          ["corr.R",
           "#scratch/models/matrix.{}.RData".format(feature)],
          log_path="#output/models/corr.{}.log".format(feature))

# bolasso
for feature in features:
    for outcome in ["OUTCOME_ANY"]:
        for i in range(env.BOLASSO_BOOTSTRAPS):
            env.R(["#scratch/models/bolasso/gamlr.{}.{}.{}.RData".format(feature, outcome, i),
                   "#scratch/models/bolasso/gamlr.{}.{}.{}.beta.csv".format(feature, outcome, i)],
                  ["gamlr-bootstrap.R",
                   constants["RANDOM_SEED"],
                   "#scratch/models/matrix.{}.RData".format(feature),
                   Value(outcome),
                   Value(i)],
                  log_path="#output/models/bolasso/gamlr.{}.{}.{}.log".format(feature, outcome, i))
        env.Python(["#output/models/lasso.bootstrap.{}.{}.freq.csv".format(feature, outcome),
                    "#output/models/postlasso.{}.{}.selected.csv".format(feature, outcome)],
                   ["lasso-frequency.py", "#output/features/manifest.tsv"] + \
                   ["#scratch/models/bolasso/gamlr.{}.{}.{}.beta.csv".format(feature, outcome, i) 
                    for i in range(env.BOLASSO_BOOTSTRAPS)],
                   log_path="#output/models/lasso-frequency.{}.{}.log".format(feature, outcome))

# postlasso
for feature in features:
    for outcome in ["OUTCOME_ANY"]:
        env.R(["#output/models/postlasso.{}.{}.csv".format(feature, outcome),
               "#output/models/postlasso.{}.{}.y_pred.csv".format(feature, outcome)],
              ["postlasso.R",
               constants["RANDOM_SEED"],
               "#scratch/models/matrix.{}.RData".format(feature),
               Value(outcome),
               "#output/models/postlasso.{}.{}.selected.csv".format(feature, outcome)],
              log_path="#output/models/postlasso.{}.{}.log".format(feature, outcome))
        env.R("#output/models/bagged-lasso.{}.{}.y_pred.csv".format(feature, outcome),
              ["bagged-lasso.R",
               "#scratch/models/matrix.{}.RData".format(feature)] + \
              ["#scratch/models/bolasso/gamlr.{}.{}.{}.RData".format(feature, outcome, i) 
                for i in range(env.BOLASSO_BOOTSTRAPS)],
              log_path="#output/models/bagged-lasso.{}.{}.log".format(feature, outcome))
        env.Python("#output/models/postlasso.{}.{}.accuracy.csv".format(feature, outcome),
                   ["accuracy.py",
                    "#output/models/postlasso.{}.{}.y_pred.csv".format(feature, outcome)],
                   log_path="#output/models/postlasso.{}.{}.accuracy.log".format(feature, outcome))
        env.Python("#output/models/bagged-lasso.{}.{}.accuracy.csv".format(feature, outcome),
                   ["accuracy.py",
                    "#output/models/bagged-lasso.{}.{}.y_pred.csv".format(feature, outcome)],
                   log_path="#output/models/bagged-lasso.{}.{}.accuracy.log".format(feature, outcome))

# propensity score for injection
env.R(["#scratch/models/propensity/stage1.RData",
       "#scratch/models/propensity/stage1.beta.csv"],
      ["propensity-stage1.R",
       constants["RANDOM_SEED"],
       "#scratch/models/matrix.all.RData"])
env.R(["scratch/models/propensity/balance.csv"],
      ["propensity-balance.R",
       "#scratch/models/matrix.all.RData",
       "#scratch/models/propensity/stage1.RData"])


# neural networks
tensors = {
    "DHS":      ["#scratch/tensors/DHS/demographics.p",
                 "#scratch/tensors/DHS/payments.p"],
    "DLT":      ["#scratch/tensors/DLT/naics.p",
                 "#scratch/tensors/DLT/payments.p",
                 "#scratch/tensors/DLT/wages.p"],
    "DOC":      ["#scratch/tensors/DOC/demographics.p",
                 "#scratch/tensors/DOC/events.p",
                 "#scratch/tensors/DOC/sentences.p"],
    "Medicaid": ["#scratch/tensors/Medicaid/diag_cde.p",
                 "#scratch/tensors/Medicaid/demographics.p",
                 "#scratch/tensors/Medicaid/enrollment.p",
                 "#scratch/tensors/Medicaid/pharmacy.p",
                 "#scratch/tensors/Medicaid/payments.p",
                 "#scratch/tensors/Medicaid/proc_cde.p",
                 "#scratch/tensors/Medicaid/risk_scores.p"],
    "Police":   ["#scratch/tensors/Police/arrests.p",
                 "#scratch/tensors/Police/calls.p",
                 "#scratch/tensors/Police/car_crashes.p",
                 "#scratch/tensors/Police/citations.p",
                 "#scratch/tensors/Police/demographics.p"]
}
tensors["all"] = sum(tensors.values(), [])
tensors["all"].append("#scratch/tensors/interactions.p")

# tensors
for tensor in tensors:
    env.Python(["#scratch/models/tensor.{}.p".format(tensor),
                "#output/models/tensor.{}.manifest.csv".format(tensor)],
               ["tensor.py", constants["NSTEPS"], tables["population"]] + tensors[tensor],
               log_path="#output/models/tensor.{}.log".format(tensor))

# LSTM neural net
for tensor in tensors:
    for outcome in outcomes:
        env.Python(["#scratch/models/lstm.{}.{}.h5".format(tensor, outcome),
                    "#scratch/models/lstm.{}.{}.png".format(tensor, outcome)],
                   ["lstm.py",
                    constants["RANDOM_SEED"],
                    "#scratch/population.csv",
                    "#scratch/outcomes/{}.csv".format(outcome),
                    Value(outcome),
                    "#scratch/models/tensor.{}.p".format(tensor)],
                   log_path="#output/models/lstm.{}.{}.log".format(tensor, outcome))
        env.Python(["#output/models/lstm.{}.{}.y_pred.csv".format(tensor, outcome)],
                   ["lstm_prediction.py",
                    "#scratch/population.csv",
                    "#scratch/outcomes/{}.csv".format(outcome),
                    Value(outcome),
                    "#scratch/models/tensor.{}.p".format(tensor),
                    "#scratch/models/lstm.{}.{}.h5".format(tensor, outcome)],
                   log_path="#output/models/lstm_prediction.{}.{}.log".format(tensor, outcome))
        env.Python("#output/models/lstm.{}.{}.accuracy.csv".format(tensor, outcome),
                   ["accuracy.py",
                    "#output/models/lstm.{}.{}.y_pred.csv".format(tensor, outcome)],
                   log_path="#output/models/lstm.{}.{}.accuracy.log".format(tensor, outcome))

# vim: syntax=python expandtab sw=4 ts=4
