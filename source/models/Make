Import("*")

seed = Value(env.RANDOM_SEED)
nsteps = Value(env.NSTEPS)
population = SQLTable("{}_pop_initialrx".format(env.RIIPL_PROJECT))

tensors = {
    "DHS":      ["#scratch/tensors/DHS/demographics.p",
                 "#scratch/tensors/DHS/payments.p"],
    "DLT":      ["#scratch/tensors/DLT/naics.p",
                 "#scratch/tensors/DLT/payments.p",
                 "#scratch/tensors/DLT/wages.p"],
    "DOC":      ["#scratch/tensors/DOC/demographics.p",
                 "#scratch/tensors/DOC/events.p",
                 "#scratch/tensors/DOC/sentences.p"],
    "Medicaid": ["#scratch/tensors/Medicaid/diag_cde.p",
                 "#scratch/tensors/Medicaid/demographics.p",
                 "#scratch/tensors/Medicaid/enrollment.p",
                 "#scratch/tensors/Medicaid/pharmacy.p",
                 "#scratch/tensors/Medicaid/payments.p",
                 "#scratch/tensors/Medicaid/proc_cde.p"],
    "Police":   ["#scratch/tensors/Police/arrests.p",
                 "#scratch/tensors/Police/calls.p",
                 "#scratch/tensors/Police/car_crashes.p",
                 "#scratch/tensors/Police/citations.p",
                 "#scratch/tensors/Police/demographics.p"]
}
tensors["all"] = sum(tensors.values(), [])

# tensors
for tensor in tensors:
    env.Python(["#scratch/models/tensor.{}.p".format(tensor),
                "#output/models/tensor.{}.manifest.csv".format(tensor)],
               ["tensor.py", nsteps, population] + tensors[tensor],
               log_path="#output/models/tensor.{}.log".format(tensor))

# neural net
for tensor in tensors:
    for outcome in OUTCOMES:
        env.Python(["#scratch/models/lstm.{}.{}.h5".format(tensor, outcome),
                    "#scratch/models/lstm.{}.{}.png".format(tensor, outcome)],
                   ["lstm.py",
                    seed,
                    "#scratch/populations/InitialRX.csv",
                    "#scratch/outcomes/{}.csv".format(outcome),
                    Value(outcome),
                    "#scratch/models/tensor.{}.p".format(tensor)],
                   log_path="#output/models/lstm.{}.{}.log".format(tensor, outcome))
        env.Python(["#output/models/lstm.{}.{}.y_pred.csv".format(tensor, outcome)],
                   ["lstm_prediction.py",
                    "#scratch/populations/InitialRX.csv",
                    "#scratch/outcomes/{}.csv".format(outcome),
                    Value(outcome),
                    "#scratch/models/tensor.{}.p".format(tensor),
                    "#scratch/models/lstm.{}.{}.h5".format(tensor, outcome)],
                   log_path="#output/models/lstm_prediction.{}.{}.log".format(tensor, outcome))

# vim: syntax=python expandtab sw=4 ts=4
