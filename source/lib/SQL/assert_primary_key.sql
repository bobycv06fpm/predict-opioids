CREATE OR REPLACE PROCEDURE ASSERT_PRIMARY_KEY (QUERY IN VARCHAR2, KEY IN VARCHAR2)
AUTHID CURRENT_USER IS 
    NULL_KEY_COUNT NUMBER;
    KEY_COUNT NUMBER;
    UNIQUE_KEY_COUNT NUMBER;
    KEY_IS_NULL_COND VARCHAR2(1000);
    QUERY_STR VARCHAR2(1000);
    KEY_IS_NULL EXCEPTION;
    KEY_NON_UNIQUE EXCEPTION;
BEGIN
    KEY_IS_NULL_COND := REGEXP_REPLACE(KEY, ',', ' IS NULL OR');
    QUERY_STR := 'SELECT COUNT(*) FROM (' || QUERY || ') WHERE ' || KEY_IS_NULL_COND || ' IS NULL';
    EXECUTE IMMEDIATE QUERY_STR INTO NULL_KEY_COUNT;
  
    IF NULL_KEY_COUNT != 0
    THEN RAISE KEY_IS_NULL;
    END IF;

    QUERY_STR := 'SELECT COUNT(*) FROM (SELECT ' || KEY || ' FROM (' || QUERY || '))';
    EXECUTE IMMEDIATE QUERY_STR INTO KEY_COUNT;
    DBMS_OUTPUT.PUT_LINE('NUMBER OF RECORDS: ' || KEY_COUNT);

    QUERY_STR := 'SELECT COUNT(*) FROM (SELECT DISTINCT ' || KEY || ' FROM (' || QUERY || '))';
    EXECUTE IMMEDIATE QUERY_STR INTO UNIQUE_KEY_COUNT;
    DBMS_OUTPUT.PUT_LINE('NUMBER OF UNIQUE RECORDS: ' || UNIQUE_KEY_COUNT);
  
    IF KEY_COUNT != UNIQUE_KEY_COUNT
    THEN RAISE KEY_NON_UNIQUE;
    END IF;
EXCEPTION
    WHEN KEY_IS_NULL THEN
      RAISE_APPLICATION_ERROR(-20101, 'THE SPECIFIED KEY(S) CONTAIN MISSING VALUES');
    WHEN KEY_NON_UNIQUE THEN
      RAISE_APPLICATION_ERROR(-20101, 'THE SPECIFIED KEY(S) DO NOT UNIQUELY IDENTIFY THE DATA');
END;
/

EXIT SUCCESS;